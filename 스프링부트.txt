// 최종수정 : 2021-02-24 //
스프링 vs 스프링부트 : 재료 vs 완성품
스프링부트 : Java의 생산성 향상
COC : 설정보다는 관습 (남들과 동일하게 작성시 작성필요x)

02/19
Hello world Controller 만들기
Boot Run을 통하여 서버 실행
SpringBoot 테스트 만들기
MockMvc 테스트 만들기

@RestController 안에 @ResponseBody 와 @Controller 가 들어있음
모의 Http response와 request를 이용한 Test = MockMvc Test



02/20
JPA 의존성 추가 -> DB쿼리대신 자바를 통해 처리할수있도록 맵핑해준 라이브러리
H2 DB 의존성 추가
Entity 생성 및 테스트

JPA에 문법에 맞게 작성시 DB에 상관없이 적당한 쿼리를 생성하여 ORM이 처리하도록 되어있음
@Id = Id임을 명시
@Generatedvalue = 자동으로 생성할 변수
Repository (interface)=> DB에 값을 저장 및 불러옴 , JpaRepository<Entity,key>로 상속받음

Lombok - @Getter , @Setter , @ToString

@Getter , @Setter 를 field 에 사용시 해당 field의 getter ,setter method 생성
class 상단에 사용시 모든 field 의 getter , setter method 생성

@ToString = Field 값이 추가가 될때마다 @Overide 시 변경해야함 , 
class 상단에 사용시 자동적으로 변경 
class 상단에 @ToString 의인자로 exclude = 해당 필드값 적을시 해당필드값은 제외시키고 ToString Method 생성 
(필드값의 오타가 발생할수 있음)
Field 에 exclude 할경우 @ToString.exclude 지정


Lombok - @Constructor
Lombok - @EqualsAndHashCode
Lombok - @Data

@NoArgsConstructor = > Default Constructor
-> 필드가 final로 설정되어 있는 경우 필드 초기화를 할수 없기때문에 생성자를 만들수없고 에러발생 문제점
-> force=true라는 옵션을 이용해 final 필드 강제 초기화를 시켜 생성자를 만들수있음
-> @NonNull과 같이 필드에 제약조건이 설정되어있는 경우, 추후 초기화를 진행하기전까지 생성자내 null-check 로직이 생성되지 않음

Nullness annotation = @NonNull : null을 허용하지 않는경우, @Nullable : null을 허용할경우

@AllArgsConstructor = > 모든 Field 에 대한 Constructor
@RequiredArgsConstructor => @NonNull이나 final인 Field만으로 이루어진 Constructor 생성
-> 두 개의 같은 타입 인스턴스 변수를 선언 후 선언된 변수의 순서를 바꾸게 되면
lombok이 파라미터 순서를 필드 선언 순서로 변경하게 되고 입력이 변경된 상태로 들어가게 되는 문제점.

HashCode = 같은 객체 , Equals = 같은 값
객체값이 같을경우 동일하다고 판단해주어야하고
HashCode 는 객체 생성시 마다 다른 HashCode를 가지게 되므로
DB에서 동일한 Key를 사용하기 위해서 
HashCode 와 Equals 를 Overide 해줄필요있음.
=> 직접구현시 실수 발생가능 => @EqualsAndHashCode 사용
-> 객체를 Set에 저장후 필드 값을 변경시 hashCode가 변경되어 이전에 저장한 객체를 찾을수 없는 문제점.

@Data = > @Getter, @Setter, @RequiredArgsConstructor, @ToString, @EqualsandHashCode 제공
Lombok 을 통한 가독성 높은 코드작성가능
-> RequiredArgsConstructor , EqualsandHashCode가 가지는 문제점을 포함함

@Builder
-> 파라미터 순서가 아닌 이름으로 값을 설정, 리팩토링에 유연하게 대응 및 필드순서가 변경되어도 상관 없음.
-> 객체 생성이 명확해짐

추가 Entity생성

Java8 이전
for문 or foreach 문을 통하여 하나씩 골라내어 가공
Java8 이후
Stream 을 이용하여 람다함수형식으로 깔끔하게 요소 처리가능'
배열의 원소가공 : map , filter, sorted
map : 요소들을 특정조건에 해당하는 값으로 변환
filter : 요소들을 조건에 따라 걸러내는 작업
sorted : 요소들을 정렬

로깅 : 로그를 생성하도록 시스템을 작성하는 활동
System.out.print() 를 사용하여 로깅을 할 경우 웹속도의 저하 , 출력되는 로그의 양이나 수준 조절 불가
SLF4J 는 로깅관련 라이브러리를 하나의 통일된 방식으로 사용할수있는 방법 제공


연관관계 매핑
1) 방향 : 단방향 관계 : 두 Entity가 관계를 맺을 때, 한 쪽의 엔티티만 참조하고 있는 것을 의미
	양방향 관계 : 두 Entity가 관계를 맺을 때, 양 쪽이 서로 참조하고 있는 것을 의미
	실제로 양방향 인 것처럼 서로다른 두 단방향 연관관계를 묶어 놓아서 표현

2) 다중성 : ManyToOne 다대일 (N : 1)		default : EAGER
	  OneToMany 일대다 (1 : N)		default : LAZY
	  OneToOne   일대일 (1 : 1)		default : EAGER
	  ManyToMany 다대다 (N : N)	default : LAZY
	  어떤 Entity를 중심으로 상대 Entity를 바라 보느냐에 따라 다중성이 다르다.

Cascade : 영속성 전이 => EntityManager를 통해 영속성 객체에 수행하는 행동이 자식까지 전파
FetchType : LAZY : 지연로딩 => 로딩되는 시점(객체가 사용되는 시점)에 프록시 객체로 가져온다
	   SELECT 문 2번 수행
	   EAGER : 즉시로딩 => 실제 조회시 한번의 SQL문으로 함께 조회 , 프록시 객체가 아닌 실제 객체로 가지고옴
	   1개의 쿼리를 날렸는데 추가 쿼리가 N개가 수행되는 N+1 문제에 직면

orphanRemoval : Entity가 삭제될때 참조가 끊어진 연관된 Entity도 삭제
CascadeType.REMOVE : 연관 Entity가 삭제될때 같이 삭제하라는 영속성 전이

Persistence Context : Entity를 영구적으로 저장하는 환경
특징 : @Id 필드를 이용여 Entity 식별
        쓰기지연기능 : 값을 변경하자마자 DB에 반영하지않고 SQL쿼리를 저장한후 commit()메서드를 호출시 DB에 반영(성능향상)
        1차캐시, 동일성보장, 변경 감지, 지연 로딩
        1차캐시에 정보가 있을시 Select를 수행하지 않고 정보제공, 없을경우 Select수행 및 1차캐시에 저장후 정보제공
        변경감지 : 1차 캐시에 최초 저장시 그상태를 복사하여 저장(Snapshot) , 이후 DB와의 동기화시 Snapshot과 Entity비교후 변경을 감지
Persistent Layer : JPA

////////////////////////////// 수정필요
JPQL
Query Method 문법 및 활용
@Embedded, @Embeddable
@Valid, @Query ( nativeQuery )
@Param

Data.sql 사용
테스트 정리 및 자동화

primitive , refferd Integer
GeneratedValue = stratge

Presentation Layer  : Controller

@GetMapping
@PathVariable
@RequestMapping

@PostMapping
@RequestBody
@ResponseStatus
